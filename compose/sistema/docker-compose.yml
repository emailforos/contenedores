version: "3"
# name: sis

services:
  ####################################################################
  #              DOMINIOS, CERTIFICADOS Y PROXY                      #
  ####################################################################

  inadyn:
    container_name: inadyn
    volumes:
      - ${DOCKERSDIR}/inadyn/inadyn.conf:/etc/inadyn.conf
    image: troglobit/inadyn:latest
    restart: unless-stopped
    networks:
      reddocker:
        ipv4_address: ${APP_DUCKDNS_IP}
  caddy:
    image: caddy
    ports:
      - 80:80
      - 443:443
      - 443:443/udp
    volumes:
      - ${DOCKERSDIR}/caddy/Caddyfile:/etc/caddy/Caddyfile:ro
      - ${DOCKERSDIR}/caddy/data:/data
      - ${DOCKERSDIR}/caddy/config:/config

    restart: unless-stopped
    container_name: caddy
    networks:
      reddocker:
        ipv4_address: ${APP_CADDY_IP}

  #####################################################################
  #                    SISTEMA                                        #
  #####################################################################

  portainer:
    image: portainer/portainer-ce:latest
    container_name: portainer
    restart: always
    ports:
      - 60004:9443
      - 50004:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKERSDIR}/portainer/portainer_data:/data
    networks:
      reddocker:
        ipv4_address: ${APP_PORTAINER_IP}

  pihole:
    container_name: pihole
    depends_on:
      - unbound
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - 53:53/tcp
      - 192.168.1.151:53:53/udp
      - 8084:80/tcp
    dns:
      - "127.0.0.1"
      - ${APP_UNBOUND_IP}
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${CONTRASENA}
    # Volumes store your data between container upgrades
    volumes:
      - ${DOCKERSDIR}/pihole/etc-pihole:/etc/pihole
      - ${DOCKERSDIR}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
    #    cap_add:
    #      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
    networks:
      reddocker:
        ipv4_address: ${APP_PIHOLE_IP}
        
  unbound:
    image: mvance/unbound:latest
    container_name: unbound
    restart: unless-stopped
    hostname: unbound
    volumes:
      - ${DOCKERSDIR}/unbound:/opt/unbound/etc/unbound/
    networks:
      reddocker:
        ipv4_address: ${APP_UNBOUND_IP}
    cap_add:
      - NET_ADMIN

  wireguard:
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=${URL_WIREGUARD}
      - SERVERPORT=51820
      - PEERS=MVJ,MVS,PTS,PCTJ,PTE,PTX,TBE,MVE,MVX
      - PEERDNS=auto
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=172.20.0.0/16,10.13.13.1/32,192.168.1.0/24
    volumes:
      - ${DOCKERSDIR}/wireguard:/config
      - ${LOGS}/wireguard:/var/log
      - /lib/modules:/lib/modules
      # - /usr/scr:/usr/scr
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    dns:
      - ${APP_PIHOLE_IP}
    restart: unless-stopped
    networks:
      reddocker:
        ipv4_address: ${APP_WIREGUARD_IP}

  homarr:
    container_name: homarr
    image: ghcr.io/ajnart/homarr:latest
    restart: always
    volumes:
      - $HOME/docker/homarr/configs:/app/data/configs
      - $HOME/docker/homarr/icons:/app/public/icons
      - $HOME/docker/homarr/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    ports:
      - 7575:7575
    environment:
      - TZ=${TZ}
    #      - EDIT_MODE_PASSWORD=10077473
    networks:
      reddocker:
        ipv4_address: ${APP_HOMARR_IP}

  diun:
    image: ghcr.io/crazy-max/diun
    container_name: diun
    hostname: raspberry
    volumes:
      - ${DOCKERSDIR}/diun/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info
      - DIUN_DB_PATH=diun.db
      - DIUN_WATCH_WORKERS=10
      - DIUN_WATCH_SCHEDULE=0 12 * * *
      - DIUN_PROVIDERS_DOCKER=true
      - DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT=true
      - DIUN_NOTIF_TELEGRAM_TOKEN=${TELEGRAM_CHAT_TOKEN}
      - DIUN_NOTIF_TELEGRAM_CHATIDS=${TELEGRAM_ID}
    restart: unless-stopped
    # labels:
    #   - diun.enable=true
    #   - diun.watch_repo=true
    networks:
      reddocker:
        ipv4_address: ${APP_DIUN_IP}

  duplicati:
    image: lscr.io/linuxserver/duplicati:arm64v8-development
    container_name: duplicati
    environment:
      - PUID=${DOCKER_ROOTPUID:-0}
      - PGID=${DOCKER_ROOTPGID:-0}
      - TZ=${TZ}
    volumes:
      - ${DOCKERSDIR}/duplicati/data/config:/config
      - ${DOCKERSDIR}/duplicati/backups:/backups
      - ${DOCKERSDIR}:/source
    ports:
      - 8200:8200
    restart: unless-stopped
    networks:
      reddocker:
        ipv4_address: ${APP_DUPLICATI_IP}

  kopia:
    image: kopia/kopia:latest
    hostname: kopia
    container_name: kopia
    restart: unless-stopped
    # Recommendation: Kopia needs root user to get access to all files
    user: ${DOCKER_ROOTPUID:-0}:${DOCKER_ROOTPGID:-0}
    privileged: true
    cap_add:
      - SYS_ADMIN
    devices:
      - /dev/fuse:/dev/fuse:rwm
    ports:
      - 51515:51515
    # Setup the server that provides the web gui
    command:
      - server
      - start
      - --disable-csrf-token-checks
      - --insecure
      - --address=0.0.0.0:51515
      - --server-username=${MYSQL_USER}
      - --server-password=${PASS}
    environment:
      # Set repository password
      KOPIA_PASSWORD: ${KOPIA_REPOSITORY_PASS}
      USER: ${MYSQL_USER}
      TZ: ${TZ}
    volumes:
      # Mount local folders needed by kopia
      - ${DOCKERSDIR}/kopia/config:/app/config
      - ${DOCKERSDIR}/kopia/cache:/app/cache
      - ${LOGS}/kopia:/app/logs
      - ${DOCKERSDIR}:/data:ro
      - ${DOCKERSDIR}/kopia/repository:/repository
      - ${DOCKERSDIR}/kopia/tmp:/tmp:shared
    networks:
      reddocker:
        ipv4_address: ${APP_KOPIA_IP}

  filebrowser:
    image: filebrowser/filebrowser:latest
    container_name: filebrowser
    user: 0:0
    ports:
      - 580:80
    volumes:
      #      - ${HOME}:/srv
      - /:/srv
      - ${DOCKERSDIR}/filebrowser/filebrowser.db:/database.db
      - ${DOCKERSDIR}/filebrowser/.filebrowser.json:/.filebrowser.json
    restart: unless-stopped
    networks:
      reddocker:
        ipv4_address: ${APP_FILEBROWSER_IP}

  bitwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: always
    environment:
      - WEBSOCKET_ENABLED=true # Enable WebSocket notifications.
      - ADMIN_TOKEN=${BITWARDEN_TOKEN}
    volumes:
      - $HOME/docker/bitwarden/data:/data
    ports:
      - 680:80 # web ui
    networks:
      reddocker:
        ipv4_address: ${APP_BITWARDEN_IP}
        
  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
      - SYS_ADMIN
    ports:
      - 8081:8080 # webapp
      - 8086:8086 # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - $HOME/docker/scrutiny/config:/opt/scrutiny/config
      - $HOME/docker/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
    networks:
      reddocker:
        ipv4_address: ${APP_SCRUTINY_IP}

# Redes
networks:
  reddocker:
    ipam:
      driver: default
      config:
        - subnet: ${GLOBAL_SUBNET}
    name: reddocker
    
volumes:
  portainer_data: null
    # db:
    #   driver: local
    # music:
    #   driver: local
    # covers:
    #   driver: local
    # search_index:
    #   driver: local
