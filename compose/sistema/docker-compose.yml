version: "3"
# name: sis
services:
  
####################################################################
#              DOMINIOS, CERTIFICADOS Y PROXY                      #
####################################################################

  duckdns:
    image: ghcr.io/linuxserver/duckdns
    container_name: duckdns
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SUBDOMAINS=${SUBDOMINIOS}
      - TOKEN=${DUCK_TOKEN}
      - LOG_FILE=true 
    volumes:
      - $HOME/docker/duckdns/config:/config
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_DUCKDNS_IP}

  swag:
    image: lscr.io/linuxserver/swag:latest
    container_name: swag
    cap_add:
      - NET_ADMIN
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - URL=${DUCKURL}
      - SUBDOMAINS=wildcard
      - VALIDATION=duckdns
      - DUCKDNSTOKEN=${DUCK_TOKEN}
      - EMAIL=${DUCKMAIL}
      - DHLEVEL=2048
      - ONLY_SUBDOMAINS=true
      - DOCKER_MODS=linuxserver/mods:swag-dashboard
    volumes:
      - ${DOCKERSDIR}/swag:/config
    ports:
      - 443:443
      - 80:80
      - 8082:81
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_SWAG_IP}

######################################################################################
#                        SISTEMA                                                     #
######################################################################################

  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    ports:
      - 9000:9000
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ${DOCKERSDIR}/portainer/portainer_data:/data
    networks:
        default:
            ipv4_address: ${APP_PORTAINER_IP}

  # adguard-home:
  #   image: adguard/adguardhome
  #   container_name: "adguard"
  #   network_mode: host
  #   restart: unless-stopped
  #   # dns:
  #   #   - 127.0.0.1
  #   #   - 1.1.1.1
  #   environment:
  #     - PUID=${PUID}
  #     - PGID=${PGID}
  #     - TZ=${TZ}
  #   # ports:
  #   #   - '53:53/tcp'
  #   #   - '53:53/udp'
  #   #   - '67:67/udp'
  #   #   - '68:68/tcp'
  #   #   - '68:68/udp'
  #   #   - '80:80/tcp'
  #   #   - '443:443/tcp'
  #   #   - '8053:80/tcp'
  #   #   - '853:853/tcp'
  #   #   - '3000:3000/tcp'
  #   volumes:
  #     - ${DOCKERSDIR}/adguard/work:/opt/adguardhome/work:rw
  #     - ${DOCKERSDIR}/adguard/confdir:/opt/adguardhome/conf:rw
  #   restart: unless-stopped

  pihole:
    container_name: pihole
    image: pihole/pihole:latest
    # For DHCP it is recommended to remove these ports and instead add: network_mode: "host"
    ports:
      - "53:53/tcp"
      - "192.168.1.151:53:53/udp"
#      - "67:67/udp" # Only required if you are using Pi-hole as your DHCP server
      - "8084:80/tcp"
#    dns:
#      - "127.0.0.1"
#      - "1.1.1.1"
    environment:
      TZ: ${TZ}
      WEBPASSWORD: ${CONTRASENA}
    # Volumes store your data between container upgrades
    volumes:
      - ${DOCKERSDIR}/pihole/etc-pihole:/etc/pihole
      - ${DOCKERSDIR}/pihole/etc-dnsmasq.d:/etc/dnsmasq.d
    #   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities
#    cap_add:
#      - NET_ADMIN # Required if you are using Pi-hole as your DHCP server, else not needed
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_PIHOLE_IP}

  wireguard:
    image: ghcr.io/linuxserver/wireguard
    container_name: wireguard
    cap_add:
      - NET_ADMIN
      - SYS_MODULE
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
      - SERVERURL=${URL_WIREGUARD} 
      - SERVERPORT=51820 
      - PEERS=MVJ,MVS,PTS,PCTJ,PTE,PTX,TBE,MVE,MVX
      - PEERDNS=auto 
      - INTERNAL_SUBNET=10.13.13.0
      - ALLOWEDIPS=172.20.0.0/16,10.13.13.1/32,192.168.1.0/24
    volumes:
      - ${DOCKERSDIR}/wireguard:/config
      - ${LOGS}/wireguard:/var/log
      - /lib/modules:/lib/modules
      # - /usr/scr:/usr/scr
    ports:
      - 51820:51820/udp
    sysctls:
      - net.ipv4.conf.all.src_valid_mark=1
    dns:
      - ${APP_PIHOLE_IP}
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_WIREGUARD_IP}

  # wg-easy:
  #   environment:
  #     # ⚠️ Required:
  #     # Change this to your host's public address
  #     - WG_HOST=vpn.vimo.duckdns.org

  #     # Optional:
  #     - PASSWORD=${CONTRASENA}
  #     # - WG_PORT=51820
  #     # - WG_DEFAULT_ADDRESS=10.8.0.x
  #     # - WG_DEFAULT_DNS=1.1.1.1
  #     # - WG_MTU=1420
  #     # - WG_ALLOWED_IPS=192.168.1.0/24
      
  #   image: weejewel/wg-easy
  #   container_name: wireguard
  #   volumes:
  #     - /home/docker/wireguard:/etc/wireguard
  #   ports:
  #     - "51820:51820/udp"
  #     - "51821:51821/tcp"
  #   restart: unless-stopped
  #   cap_add:
  #     - NET_ADMIN
  #     - SYS_MODULE
  #   sysctls:
  #     - net.ipv4.ip_forward=1
  #     - net.ipv4.conf.all.src_valid_mark=1

  heimdall:
    image: lscr.io/linuxserver/heimdall:latest
    container_name: heimdall
    environment:
      - PUID=${PUID}
      - PGID=${PGID}
      - TZ=${TZ}
    volumes:
      - ${DOCKERSDIR}/heimdall/config:/config
    ports:
      - 380:80
      - 3443:443
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_HEIMDALL_IP}
    
  diun:
    image: ghcr.io/crazy-max/diun
    container_name: diun
    hostname: raspberry
    volumes:
      - ${DOCKERSDIR}/diun/data:/data
      - /var/run/docker.sock:/var/run/docker.sock:ro
    environment:
      - TZ=${TZ}
      - LOG_LEVEL=info
      - DIUN_DB_PATH=diun.db
      - DIUN_WATCH_WORKERS=10
      - DIUN_WATCH_SCHEDULE=0 12 * * *
      - DIUN_PROVIDERS_DOCKER=true
      - DIUN_PROVIDERS_DOCKER_WATCHBYDEFAULT=true
      - DIUN_NOTIF_TELEGRAM_TOKEN=${TELEGRAM_CHAT_TOKEN}
      - DIUN_NOTIF_TELEGRAM_CHATIDS=${TELEGRAM_ID}
    restart: unless-stopped
    # labels:
    #   - diun.enable=true
    #   - diun.watch_repo=true
    networks:
        default:
            ipv4_address: ${APP_DIUN_IP}

  # duplicati:
  #   image: ghcr.io/linuxserver/duplicati
  #   container_name: duplicati
  #   environment:
  #     - PUID=0
  #     - PGID=0
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DOCKERSDIR}/duplicati/config:/config
  #     - ${DOCKERSDIR}/duplicati/backups:/backups
  #     - ${DOCKERSDIR}:/source
  #   ports:
  #     - 8200:8200
  #   restart: unless-stopped

  duplicati:
    image: duplicati/duplicati:canary
    container_name: duplicati
    hostname: duplicati
    restart: always
    # Recommendation: Duplicati needs root user to get access to all files
    user: "${DOCKER_ROOTPUID:-0}:${DOCKER_ROOTPGID:-0}"
    network_mode: bridge
    ports:
      - 8200:8200
    volumes:
      - ${DOCKERSDIR}/duplicati/data:/data:rw
      - ${DOCKERSDIR}/duplicati/backups:/backups:rw
      - ${DOCKERSDIR}:/source:ro
    environment:
      - TZ=${TZ}
    networks:
        default:
            ipv4_address: ${APP_DUPLICATI_IP}

  filebrowser:
    image: filebrowser/filebrowser
    container_name: filebrowser
    user: "${PUID}:${PGID}"
    ports:
      - 580:80
    volumes:
#      - ${HOME}:/srv
      - /:/srv
      - ${DOCKERSDIR}/filebrowser/filebrowser.db:/database.db
      - ${DOCKERSDIR}/filebrowser/.filebrowser.json:/.filebrowser.json
    restart: unless-stopped
    networks:
        default:
            ipv4_address: ${APP_FILEBROWSER_IP}

  bitwarden:
    image: vaultwarden/server:latest
    container_name: vaultwarden
    restart: always
    environment:
      - WEBSOCKET_ENABLED=true  # Enable WebSocket notifications.
      - ADMIN_TOKEN=${BITWARDEN_TOKEN}
    volumes:
      - $HOME/docker/bitwarden/data:/data
    ports:
      - "680:80" # web ui
    networks:
        default:
            ipv4_address: ${APP_BITWARDEN_IP}

  scrutiny:
    container_name: scrutiny
    image: ghcr.io/analogj/scrutiny:master-omnibus
    cap_add:
      - SYS_RAWIO
    ports:
      - "8081:8080" # webapp
      - "8086:8086" # influxDB admin
    volumes:
      - /run/udev:/run/udev:ro
      - $HOME/docker/scrutiny/config:/opt/scrutiny/config
      - $HOME/docker/scrutiny/influxdb:/opt/scrutiny/influxdb
    devices:
      - "/dev/sda"
    networks:
        default:
            ipv4_address: ${APP_SCRUTINY_IP}

  glances:
    container_name: glances
    image: joweisberg/glances:latest
    restart: unless-stopped
    pid: host
    ports:
      - 61208:61208
    environment:
      - TZ=${TZ}
      - GLANCES_OPT=--webserver
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /var/docker/glances:/glances/conf
    networks:
        default:
            ipv4_address: ${APP_GLANCES_IP}

  # syncthing:
  #   image: lscr.io/linuxserver/syncthing:latest
  #   container_name: syncthing
  #   hostname: syncthing
  #   environment:
  #     - PUID=0
  #     - PGID=0
  #     - TZ=${TZ}
  #   volumes:
  #     - ${DOCKERSDIR}/syncthing/config:/config
  #     - ${DOCKERSDIR}:/CSPI/docker
  #     - /home/pi/medios:/CSPI/medios
  #   ports:
  #     - 8384:8384
  #     - 22000:22000/tcp
  #     - 22000:22000/udp
  #     - 21027:21027/udp
  #   restart: unless-stopped
  #   networks:
  #       default:
  #           ipv4_address: 172.20.0.25

# Redes
networks:
  default:
    ipam:
      driver: default
      config:
        - subnet: ${GLOBAL_SUBNET}

volumes:
  portainer_data:
  # db:
  #   driver: local
  # music:
  #   driver: local
  # covers:
  #   driver: local
  # search_index:
  #   driver: local


